#####################################################################
#   print_start macro
#####################################################################

[gcode_macro PRINT_START]
gcode:
  # Turn On Caselight
  LED_PCT_PRINT

  # Fetch data from slicer: bed temp, extruder temp, chamber temp, and printer size
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set filament_type = params.MATERIAL|default("") %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Home the printer, set absolute positioning, and update Stealthburner LEDs
  STATUS_HOMING
  G28
  G90

  # Clear old bed mesh
  BED_MESH_CLEAR

  # Heating bed
  {% if filament_type == "TPU" %}
    SET_DISPLAY_TEXT MSG="TPU detected, minimal bed heating: {target_bed}°C"
    M140 S{target_bed}  # Set bed temperature without waiting
  {% else %}
    SET_DISPLAY_TEXT MSG="Heat up the Bed: {target_bed}°C"
    STATUS_HEATING
    G1 X{x_wait} Y{y_wait} Z15 F9000

    {% if target_bed > 90 %}
      M106 S255  # Turn on the PT-fan
      M190 S{target_bed}  # Set bed target temperature
      SET_DISPLAY_TEXT MSG="Perform Heatsoak: {target_chamber}°C"
      TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber" MINIMUM={target_chamber}
    {% else %}
      M190 S{target_bed}  # Set bed target temperature
      SET_DISPLAY_TEXT MSG="Soak for 5min"
      G4 P300000  # Wait 5 min for bed temp stabilization
    {% endif %}
  {% endif %}

  # Heating nozzle to 150 degrees
  SET_DISPLAY_TEXT MSG="Heat up the hotend: 150°C"
  M109 S150

  # Perform Quad Gantry Leveling
  SET_DISPLAY_TEXT MSG="Perform Quad gantry level (QGL)"
  STATUS_LEVELING
  quad_gantry_level
  G28 Z  # Home Z after leveling

  # Perform bed mesh
  SET_DISPLAY_TEXT MSG="Perform bed mesh"
  STATUS_MESHING
  BED_MESH_CALIBRATE

  # Heating nozzle to target temp
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}°C"
  STATUS_HEATING
  G1 X{x_wait} Y{y_wait} Z15 F9000
  M107  # Turn off part cooling fan
  M109 S{target_extruder}  # Heat nozzle to printing temperature

  SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0

#####################################################################
#   PURGE Line
#####################################################################
  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printing"          # Displays info
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  G0 Z0.4                                          # Raises Z to 0.4
  G91                                              # Incremental positioning 
  #G1 X100 E20 F1000                               # Purge line (Defaut)
  #G1 X100 E20 F1440                                # Purge line für PLA+ 
  #G1 X100 E20 F1000                               # Purge line für ABS  
  G1 X100 E20 F750                                # Purge line für TPU 
  G90                                              # Absolut position

  SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1
  #SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
#####################################################################
#  Prusa PURGE Line
#####################################################################
  # SET_DISPLAY_TEXT MSG="Printing"          # Displays info
  # STATUS_PRINTING                          # Sets SB-leds to printing-mode  
  # G0 X{x_wait - 50} Y4 F10000              # Moves to starting point
  # G90
  # G92 E0
  # M83
  # G0 E3 F500
  # G0 X15 E5 Z0.2 F500
  # G0 X25 E3 F500
  # G0 X35 E3 F650
  # G0 X40 E3 F800
  # G0 X45 Z0.05 F8000
  # G0 X50 Z0.2 F8000
  # G92 E0  


    
######################################################################
# CANCEL_PRINT
######################################################################

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
   M220 S100 ; Reset Speed factor override percentage to default (100%)
   M221 S100 ; Reset Extrude factor override percentage to default (100%)
   G91 ; Set coordinates to relative
   {% if printer.extruder.temperature >= 170 %}
      G1 F1800 E-1 ; Retract filament 3 mm to prevent oozing
   {% endif %}
   ;if all axis are homed, lift the hotend to leave room for hot filament to ooze and to keep it clear of the bed.
   {% if printer.toolhead.homed_axes == "xyz" %}
      G1 F6000 Z10 ; Move Z Axis up 10 mm to allow filament ooze freely
      G90 ; Set coordinates to absolute
      G1 X350 Y221 F1000 ; Move Printer Head Out of Way
      ; M84 ; Disable stepper motors - don't so the gantry stays aligned
   {% endif %}
   ;set part fan speed to zero.
   M106 S0
   ;bed and hotend are left at the print temps in case I want to restart.
   CLEAR_PAUSE
   BASE_CANCEL_PRINT
   LED_PCT_IDLE
   

######################################################################
# Filament Change
######################################################################

[pause_resume]

#####################################################################
#   MACRO M600 Default
#####################################################################

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(30)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state    

#####################################################################
#   Extrude Panel Default
#####################################################################

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0  ; Sensor deaktivieren
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    G90
    #SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1  ; Sensor aktivieren
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  100
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0  ; Sensor deaktivieren
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    #SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1  ; Sensor aktivieren
    RESTORE_GCODE_STATE NAME=unload_state
    CLEAR_ACTIVE_SPOOL

#####################################################################
#  Caselight
#####################################################################
[gcode_macro _CASELIGHT_ON]
description: Helper: Light on
gcode:
  SET_PIN PIN=caselight VALUE=1.0
  {action_respond_info("Caselight on")}
    
[gcode_macro _CASELIGHT_OFF]
description: Helper: Light off
gcode:
  SET_PIN PIN=caselight VALUE=0.0
  {action_respond_info("Caselight off")}

[gcode_macro CASELIGHT]
description: Toggle light
gcode: {% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}

[gcode_macro LED_ON]
gcode:
  SET_PIN PIN=caselight VALUE=1

[gcode_macro LED_PCT_PREHEAT]
gcode:
  SET_PIN PIN=caselight VALUE=0.06

[gcode_macro LED_PCT_PRINT]
gcode:
  SET_PIN PIN=caselight VALUE=0.4

[gcode_macro LED_PCT_IDLE]
gcode:
  SET_PIN PIN=caselight VALUE=0.06

[gcode_macro LED_OFF]
gcode:
  SET_PIN PIN=caselight VALUE=0

[gcode_macro HEIZBETT_2]
description: Aktiviert das Heizbett für 2 Stunden
gcode:
    # Heizbett auf Zieltemperatur setzen    
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    M140 S{BED_TEMP}

    # 2 Stunden (7200 Sekunden) warten
    G4 P7200000

    # Heizbett ausschalten
    M140 S0

#####################################################################
#  TEST_SPEED
#####################################################################
[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED


# #####################################################################
# #   Nozzle Clean and Purge Bucket
# #####################################################################    
# [gcode_macro CLEAN_NOZZLE]
# variable_start_x: 50
# variable_start_y: 0
# variable_start_z: 6
# variable_wipe_dist: -50
# variable_wipe_qty: 10
# variable_wipe_spd: 200
# variable_raise_distance: 20

# gcode:
#  {% if "xyz" not in printer.toolhead.homed_axes %}
#    G28
#  {% endif %}
 
#  G90                                            ; absolute positioning
#  ## Move nozzle to start position
#  G1 X{start_x} Y{start_y} F6000
#  G1 Z{start_z} F1500

#  ## Wipe nozzle
#  {% for wipes in range(1, (wipe_qty + 1)) %}
#    G1 X{start_x + wipe_dist} F{wipe_spd * 60}
#    G1 X{start_x} F{wipe_spd * 60}
#  {% endfor %}

#  ## Raise nozzle
#  G1 Z{raise_distance}

[gcode_macro SHOW_TEXT]
description: "Zeigt eine Nachricht auf dem KlipperScreen an"
gcode:
  M117 Dies ist ein Testtext! ; Zeigt den Text auf dem Bildschirm an

[gcode_macro LED_EFFECT_BLINK]
description: "Create a blinking LED effect"
gcode:
    M150 R0 U255 B0  # Turn on LEDs (Green)
    G4 S0.5  # Wait for 0.5 seconds
    M150 R0 U0 B0  # Turn off LEDs
    G4 S0.5  # Wait for another 0.5 seconds

#####################################################################
#   Cold Pull Macro 1
#####################################################################    
[gcode_macro Clean_Filament_Cold_Pull]
description: Sparta3D Cleaning Filament Cold Pull, Thank you Vince
gcode:
## -- Set Extruder Temp
    {% set TEMP = params.TEMP|default(260)|float %}
## -- Resting Temp
    {% set REST_TEMP = params.REST_TEMP|default(50)|float %}
## -- Set Pulling Extruder Temp
    {% set PULL_TEMP = params.PULL_TEMP|default(130)|float %}

## --
    M109 S{TEMP}                ; Turn on Heaters
    M106 S128                   ; Part Cooling Fan
    G1 E50 F2000                ; Pull in Filament 
    G1 E100 F150                ; Slow Extrude
    M400
    M109 S{REST_TEMP}           ; Cooldown
    M109 S{PULL_TEMP}           ; Temp Set for pulling
    G4 P{2 * 60000}             ; Dwell for 2 min
    BEEP I=3 DUR=100 FREQ=1000  ;Beeps lets you know it's ready
    G4 P{1 * 60000}             ; Dwell for 1 min
    M104 S0                     ; Turn Off Hotend
    G4 P{1 * 60000}             ; Dwell for 1 min
    M106 S0                     ; Turn Off Fans

## -//-  

#####################################################################
#   Cold Pull Macro 2
##################################################################### 

[gcode_macro COLD_PULL2]
description: "Führt einen Cold Pull durch, um das Hotend zu reinigen."
gcode:
  M104 S260  ; Setze die Hotend-Temperatur auf 200°C (oder deine bevorzugte Temperatur)
  G28         ; Homing der Achsen
  G1 Z10 F3000 ; Senke die Z-Achse auf 10mm
  M190 S60    ; Warte, bis das Bett auf 60°C (oder eine andere Temperatur) erreicht ist
  M109 S260   ; Warte, bis das Hotend 200°C erreicht hat
  G1 E10 F300 ; Fülle das Hotend mit Filament (10mm)
  G1 E-10 F300 ; Ziehe das Filament schnell wieder zurück (10mm)
  G1 Z0 F300  ; Stelle die Z-Achse auf 0mm zurück
  G1 E-5 F300 ; Ziehe das Filament wieder zurück (5mm)
  G4 P3000    ; Halte 3 Sekunden für Stabilität
  G1 E-10 F300 ; Ziehe das Filament wieder zurück (10mm)
  M104 S0     ; Schalte die Heizung des Hotends aus
  G1 Z10 F3000 ; Hebe die Z-Achse an

[gcode_macro UPDATE_GIT]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c $0"
timeout: 90.0
verbose: True

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}