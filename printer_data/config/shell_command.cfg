#####################################################################
#   Enhanced Shell Commands
#####################################################################

# ==================== SYSTEM COMMANDS ====================

[gcode_shell_command system_update]
command: bash -c "sudo apt update && sudo apt upgrade -y"
timeout: 300.0
verbose: True

[gcode_macro SYSTEM_UPDATE]
description: Update system packages
gcode:
    RESPOND MSG="Starting system update..."
    RUN_SHELL_COMMAND CMD=system_update

[gcode_shell_command klipper_restart]
command: systemctl restart klipper
timeout: 30.0
verbose: True

[gcode_shell_command moonraker_restart]
command: systemctl restart moonraker
timeout: 30.0
verbose: True

[gcode_shell_command klipperscreen_restart]
command: systemctl restart KlipperScreen
timeout: 30.0
verbose: True

[gcode_macro RESTART_ALL_SERVICES]
description: Restart Klipper, Moonraker and KlipperScreen
gcode:
    RESPOND MSG="Restarting all services..."
    RUN_SHELL_COMMAND CMD=klipper_restart
    G4 P2000
    RUN_SHELL_COMMAND CMD=moonraker_restart
    G4 P2000
    RUN_SHELL_COMMAND CMD=klipperscreen_restart

# ==================== BACKUP & MAINTENANCE ====================

[gcode_shell_command backup_config]
command: bash -c "tar -czf /home/benlue/printer_data/backups/config_$(date +%Y%m%d_%H%M%S).tar.gz -C /home/benlue/printer_data/config ."
timeout: 60.0
verbose: True

[gcode_macro BACKUP_CONFIG]
description: Create timestamped config backup
gcode:
    RESPOND MSG="Creating config backup..."
    RUN_SHELL_COMMAND CMD=backup_config
    RESPOND MSG="Backup completed!"

[gcode_shell_command cleanup_logs]
command: bash -c "find /home/benlue/printer_data/logs -name '*.log' -mtime +30 -delete && find /home/benlue/printer_data/logs -name '*.log.*' -mtime +7 -delete"
timeout: 30.0
verbose: True

[gcode_macro CLEANUP_LOGS]
description: Delete old log files (>30 days)
gcode:
    RESPOND MSG="Cleaning up old log files..."
    RUN_SHELL_COMMAND CMD=cleanup_logs
    RESPOND MSG="Log cleanup completed!"

# ==================== MONITORING ====================

[gcode_shell_command check_disk_space]
command: df -h /home/benlue/printer_data | tail -n 1 | awk '{print "Disk: "$3" used / "$2" total ("$5" full)"}'
timeout: 5.0
verbose: True

[gcode_macro CHECK_DISK_SPACE]
description: Check available disk space
gcode:
    RUN_SHELL_COMMAND CMD=check_disk_space

[gcode_shell_command check_system_temp]
command: bash -c "echo 'CPU Temp:' $(vcgencmd measure_temp 2>/dev/null || sensors | grep 'Package id' | awk '{print $4}')"
timeout: 5.0
verbose: True

[gcode_macro CHECK_SYSTEM_TEMP]
description: Check system temperature
gcode:
    RUN_SHELL_COMMAND CMD=check_system_temp

[gcode_shell_command check_mcu_version]
command: bash -c "echo 'MCU Version:' && ls -l /home/benlue/klipper/.git/refs/heads/master"
timeout: 5.0
verbose: True

[gcode_macro SYSTEM_INFO]
description: Display comprehensive system information
gcode:
    RESPOND MSG="=== System Information ==="
    CHECK_DISK_SPACE
    CHECK_SYSTEM_TEMP
    RESPOND MSG="========================="

# ==================== CAMERA ====================

[gcode_shell_command restart_camera]
command: systemctl restart crowsnest
timeout: 30.0
verbose: True

[gcode_macro RESTART_CAMERA]
description: Restart camera service (crowsnest)
gcode:
    RESPOND MSG="Restarting camera..."
    RUN_SHELL_COMMAND CMD=restart_camera

# ==================== NETWORK ====================

[gcode_shell_command check_network]
command: bash -c "ip addr show | grep 'inet ' | grep -v '127.0.0.1' | awk '{print \"IP: \"$2}'"
timeout: 5.0
verbose: True

[gcode_macro CHECK_NETWORK]
description: Display network information
gcode:
    RUN_SHELL_COMMAND CMD=check_network

[gcode_shell_command check_moonraker_api]
command: bash -c "curl -s http://localhost:7125/server/info | python3 -m json.tool | grep 'klippy_state' || echo 'API check failed'"
timeout: 10.0
verbose: True

[gcode_macro CHECK_MOONRAKER]
description: Check Moonraker API status
gcode:
    RUN_SHELL_COMMAND CMD=check_moonraker_api

# ==================== GITHUB BACKUP (existing) ====================

[gcode_macro UPDATE_GIT]
description: FÃ¼hrt ein Backup auf Github aus
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c $0"
timeout: 90.0
verbose: True

# ==================== SPOOLMAN (existing) ====================

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}

# ==================== MAINTENANCE ROUTINE ====================

[gcode_macro MAINTENANCE_ROUTINE]
description: Run complete maintenance (backup + cleanup + updates)
gcode:
    RESPOND MSG="=== Starting Maintenance Routine ==="

    RESPOND MSG="[1/4] Creating config backup..."
    BACKUP_CONFIG

    RESPOND MSG="[2/4] Cleaning up old logs..."
    CLEANUP_LOGS

    RESPOND MSG="[3/4] Backing up to GitHub..."
    UPDATE_GIT MESSAGE="Automated maintenance backup"

    RESPOND MSG="[4/4] System information..."
    SYSTEM_INFO

    RESPOND MSG="=== Maintenance Complete ==="

# ==================== EMERGENCY COMMANDS ====================

[gcode_shell_command emergency_stop_all]
command: bash -c "systemctl stop klipper moonraker KlipperScreen crowsnest"
timeout: 30.0
verbose: True

[gcode_macro EMERGENCY_STOP_ALL]
description: Stop all services (emergency)
gcode:
    RESPOND MSG="!!! EMERGENCY STOP - All services stopping !!!"
    RUN_SHELL_COMMAND CMD=emergency_stop_all

[gcode_shell_command emergency_start_all]
command: bash -c "systemctl start klipper moonraker KlipperScreen crowsnest"
timeout: 30.0
verbose: True

[gcode_macro EMERGENCY_START_ALL]
description: Start all services after emergency stop
gcode:
    RESPOND MSG="Starting all services..."
    RUN_SHELL_COMMAND CMD=emergency_start_all
    RESPOND MSG="All services started!"
