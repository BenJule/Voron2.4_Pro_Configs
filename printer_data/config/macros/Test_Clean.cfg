# ========================================================================
# ASCII-ONLY SMART NOZZLE CLEANING - 100% KLIPPER COMPATIBLE
# No special characters, simplified messages for universal compatibility
# ========================================================================

[gcode_macro CLEAN_NOZZLE_SMART]
description: Smart nozzle cleaning - ASCII only for compatibility
# === LEARNING DATA ===
variable_success_count: 0          # Successful cleanings
variable_failure_count: 0          # Failed cleanings
variable_last_material: "PLA"      # Last used material
variable_efficiency_score: 1.0     # Current efficiency rating

# === CONFIGURATION - ADJUST FOR YOUR VORON SETUP ===
variable_start_x: 35               # Start position X - ADJUST!
variable_start_y: 0                # Start position Y - ADJUST! (Voron rear)
variable_start_z: 4                # Start position Z - ADJUST!
variable_wipe_dist: 50             # Wipe distance X-axis
variable_wipe_qty: 3               # Number of zigzag wipes
variable_wipe_spd: 150             # Wipe speed mm/s
variable_wipe_y_offset: 2          # Y offset for zigzag
variable_raise_distance: 20        # Raise height after wipe
variable_purge_length: 30          # Purge length mm
variable_purge_speed: 5            # Purge speed mm/s
variable_clean_temp: 270           # Cleaning temperature
variable_retract_length: 5         # Retract length mm
variable_retract_speed: 25         # Retract speed mm/s
variable_pause_time: 1000          # Pause after wipe (ms)

# === ADVANCED FEATURES ===
variable_enable_learning: True     # Enable learning mode
variable_adaptive_purge: True      # Adapt purge to material
variable_adaptive_temp: True       # Adapt temperature to material
variable_contamination_detection: True # Contamination detection
variable_quality_check: True       # Quality control

gcode:
  # === PARAMETER PROCESSING ===
  {% set material = params.MATERIAL|default(last_material)|string %}
  {% set force_mode = params.FORCE|default('auto')|string %}
  {% set eco_mode = params.ECO|default('false')|lower == 'true' %}
  
  # === MATERIAL CHANGE DETECTION ===
  {% set material_changed = False %}
  {% if material != last_material %}
    {% set material_changed = True %}
    SET_GCODE_VARIABLE MACRO=CLEAN_NOZZLE_SMART VARIABLE=last_material VALUE='"{material}"'
    { action_respond_info("Material change detected: " ~ last_material ~ " -> " ~ material) }
  {% endif %}

  # === CONTAMINATION ANALYSIS ===
  {% set total_hours = printer.print_stats.total_duration / 3600 %}
  {% set hours_since_clean = total_hours % 12.0 %}
  
  {% set contamination_level = 'low' %}
  {% if hours_since_clean > 20 %}
    {% set contamination_level = 'critical' %}
  {% elif hours_since_clean > 15 %}
    {% set contamination_level = 'high' %}
  {% elif hours_since_clean > 8 %}
    {% set contamination_level = 'medium' %}
  {% endif %}
  
  # Material change increases contamination
  {% if material_changed %}
    {% if contamination_level == 'low' %}
      {% set contamination_level = 'medium' %}
    {% elif contamination_level == 'medium' %}
      {% set contamination_level = 'high' %}
    {% endif %}
  {% endif %}

  { action_respond_info("=== SMART CLEANING ANALYSIS ===") }
  { action_respond_info("Material: " ~ material ~ " | Contamination: " ~ contamination_level ~ " | Runtime: " ~ "%.1f"|format(total_hours) ~ "h") }

  # === MATERIAL-SPECIFIC ADJUSTMENTS ===
  {% set temp_adjustment = 0 %}
  {% set purge_multiplier = 1.0 %}
  {% set speed_factor = 1.0 %}
  
  {% if adaptive_temp %}
    {% if material.upper() == 'PLA' %}
      {% set temp_adjustment = -50 %}
      {% set purge_multiplier = 1.0 %}
      {% set speed_factor = 1.0 %}
    {% elif material.upper() == 'PETG' %}
      {% set temp_adjustment = -20 %}
      {% set purge_multiplier = 1.3 %}
      {% set speed_factor = 0.8 %}
    {% elif material.upper() == 'ABS' %}
      {% set temp_adjustment = -10 %}
      {% set purge_multiplier = 1.1 %}
      {% set speed_factor = 0.9 %}
    {% elif material.upper() == 'TPU' %}
      {% set temp_adjustment = -45 %}
      {% set purge_multiplier = 0.8 %}
      {% set speed_factor = 0.6 %}
    {% elif material.upper() == 'WOOD' %}
      {% set temp_adjustment = -60 %}
      {% set purge_multiplier = 1.5 %}
      {% set speed_factor = 0.7 %}
    {% endif %}
  {% endif %}

  # === ADAPTIVE PARAMETER CALCULATION ===
  {% set calculated_temp = clean_temp + temp_adjustment %}
  
  # Contamination-based adjustments
  {% if contamination_level == 'critical' %}
    {% set calculated_temp = calculated_temp + 15 %}
    {% set purge_multiplier = purge_multiplier * 2.0 %}
    {% set calculated_cycles = wipe_qty * 3 %}
    {% set speed_factor = speed_factor * 0.6 %}
  {% elif contamination_level == 'high' %}
    {% set calculated_temp = calculated_temp + 10 %}
    {% set purge_multiplier = purge_multiplier * 1.5 %}
    {% set calculated_cycles = wipe_qty * 2 %}
    {% set speed_factor = speed_factor * 0.7 %}
  {% elif contamination_level == 'medium' %}
    {% set calculated_temp = calculated_temp + 5 %}
    {% set purge_multiplier = purge_multiplier * 1.2 %}
    {% set calculated_cycles = (wipe_qty * 1.5)|int %}
    {% set speed_factor = speed_factor * 0.8 %}
  {% else %}
    {% set calculated_cycles = wipe_qty %}
  {% endif %}

  {% set calculated_purge = purge_length * purge_multiplier %}
  {% set calculated_speed = wipe_spd * speed_factor %}
  
  # Eco mode adjustments
  {% if eco_mode %}
    {% set calculated_purge = calculated_purge * 0.7 %}
    {% set calculated_speed = calculated_speed * 1.2 %}
    { action_respond_info("Eco mode active - Material and time optimized") }
  {% endif %}

  # Force mode overrides
  {% if force_mode == 'deep' %}
    {% set calculated_cycles = wipe_qty * 2 %}
    {% set calculated_purge = calculated_purge * 1.5 %}
    {% set calculated_temp = calculated_temp + 10 %}
    { action_respond_info("Forced deep cleaning activated") }
  {% elif force_mode == 'quick' %}
    {% set calculated_cycles = (wipe_qty * 0.6)|int %}
    {% set calculated_purge = calculated_purge * 0.6 %}
    { action_respond_info("Quick cleaning forced") }
  {% endif %}

  { action_respond_info("=== CALCULATED PARAMETERS ===") }
  { action_respond_info("Temperature: " ~ "%.0f"|format(calculated_temp) ~ "C | Purge: " ~ "%.1f"|format(calculated_purge) ~ "mm | Cycles: " ~ calculated_cycles ~ " | Speed: " ~ "%.0f"|format(calculated_speed) ~ "mm/s") }

  # === SAFETY CHECKS ===
  {% if printer.toolhead.homed_axes != "xyz" %}
    { action_respond_info("Auto-homing required...") }
    G28
  {% endif %}

  # Temperature safety
  {% if calculated_temp > 300 %}
    {% set calculated_temp = 300 %}
    { action_respond_info("Temperature limited to 300C") }
  {% elif calculated_temp < 180 %}
    {% set calculated_temp = 180 %}
    { action_respond_info("Temperature raised to 180C") }
  {% endif %}

  # === EXECUTION ===
  {% set original_temp = printer.extruder.target %}
  {% set start_time = printer.system_stats.cputime %}

  { action_respond_info("=== SMART CLEANING STARTED ===") }
  M117 Smart Clean Init

  # Basic settings
  G90                              # Absolute positioning
  M83                              # Relative extrusion
  
  # Positioning
  { action_respond_info("Positioning to cleaning location...") }
  M117 Positioning
  G1 X{start_x} Y{start_y} F6000
  G1 Z{start_z + 5} F1500

  # Temperature management
  {% if calculated_temp != original_temp %}
    { action_respond_info("Heating to " ~ "%.0f"|format(calculated_temp) ~ "C for " ~ material) }
    M117 Heating
    M107                           # Fan off
    M109 S{calculated_temp}        # Heat to target temperature
    G4 P5000                       # Stabilization
  {% endif %}

  # === INTELLIGENT PURGE SEQUENCE ===
  {% if adaptive_purge and calculated_purge > 0 %}
    { action_respond_info("Smart Purge: " ~ "%.1f"|format(calculated_purge) ~ "mm") }
    M117 Smart Purge
    G1 Z{start_z + 3} F1500
    G92 E0
    
    # Multi-phase purge for critical contamination
    {% if contamination_level == 'critical' %}
      G1 E{calculated_purge * 0.3} F{purge_speed * 30}
      G1 E{calculated_purge * 0.4} F{purge_speed * 60}
      G1 E{calculated_purge * 0.3} F{purge_speed * 45}
    {% else %}
      G1 E{calculated_purge} F{purge_speed * 60}
    {% endif %}
    
    G92 E0
    G1 Z{start_z} F1500
  {% endif %}

  # === ADAPTIVE WIPE SEQUENCE ===
  { action_respond_info("Smart Wipe: " ~ calculated_cycles ~ " cycles") }
  M117 Smart Wipe
  
  {% for cycle in range(calculated_cycles) %}
    # Progressive speed adjustment
    {% set cycle_progress = cycle / calculated_cycles %}
    {% set current_speed = calculated_speed * (0.7 + 0.3 * cycle_progress) %}
    
    {% for i in range(wipe_qty) %}
      {% set y_pos = start_y + (i * wipe_y_offset) %}
      
      # Wipe right
      G1 X{start_x + wipe_dist} Y{y_pos} F{current_speed * 60}
      
      # Additional pause for critical contamination
      {% if contamination_level == 'critical' %}
        G4 P150
      {% endif %}
      
      # Wipe left (except on last)
      {% if i < (wipe_qty - 1) %}
        G1 X{start_x} Y{y_pos + wipe_y_offset} F{current_speed * 60}
      {% endif %}
    {% endfor %}
    
    # Inter-cycle pause
    {% if cycle < (calculated_cycles - 1) %}
      {% if contamination_level == 'critical' %}
        G4 P500
      {% else %}
        G4 P200
      {% endif %}
    {% endif %}
  {% endfor %}

  # === POST-PROCESSING ===
  G4 P{pause_time}
  
  # Intelligent retract
  {% set smart_retract = retract_length %}
  {% if contamination_level in ['high', 'critical'] %}
    {% set smart_retract = smart_retract * 1.5 %}
  {% endif %}
  G1 E-{smart_retract} F{retract_speed * 60}
  
  # Safe raise
  G1 Z{start_z + raise_distance} F1500

  # === QUALITY ASSESSMENT ===
  {% set end_time = printer.system_stats.cputime %}
  {% set cleaning_duration = end_time - start_time %}
  
  {% if quality_check %}
    # Simplified quality assessment
    {% set predicted_quality = 0.95 %}
    {% if contamination_level == 'critical' %}
      {% set predicted_quality = 0.85 %}
    {% elif contamination_level == 'high' %}
      {% set predicted_quality = 0.90 %}
    {% endif %}
    
    { action_respond_info("Estimated cleaning quality: " ~ "%.0f"|format(predicted_quality * 100) ~ "%") }
  {% endif %}

  # === LEARNING SYSTEM UPDATE ===
  {% if enable_learning %}
    {% set new_success_count = success_count + 1 %}
    {% set new_efficiency = (predicted_quality if quality_check else 0.90) %}
    
    SET_GCODE_VARIABLE MACRO=CLEAN_NOZZLE_SMART VARIABLE=success_count VALUE={new_success_count}
    SET_GCODE_VARIABLE MACRO=CLEAN_NOZZLE_SMART VARIABLE=efficiency_score VALUE={new_efficiency}
    
    { action_respond_info("Learning Update: Success #" ~ new_success_count ~ " | Efficiency: " ~ "%.0f"|format(new_efficiency * 100) ~ "%") }
  {% endif %}

  # === TEMPERATURE RESTORE ===
  {% if calculated_temp != original_temp %}
    { action_respond_info("Temperature being restored...") }
    M117 Restoring Temp
    {% if original_temp > 0 %}
      M109 S{original_temp}
    {% else %}
      M104 S0
    {% endif %}
  {% endif %}

  # === FINAL REPORT ===
  M117 Smart Clean Complete
  { action_respond_info("=== SMART CLEANING SUCCESSFUL ===") }
  {% set final_quality = (predicted_quality if quality_check else 0.90) * 100 %}
  {% set success_rate = (success_count / (success_count + failure_count + 1)) * 100 %}
  { action_respond_info("Quality: " ~ "%.0f"|format(final_quality) ~ "% | Duration: " ~ "%.1f"|format(cleaning_duration) ~ "s | Success Rate: " ~ "%.1f"|format(success_rate) ~ "%") }

# ========================================================================
# HELPER MACROS
# ========================================================================

[gcode_macro SMART_ANALYZE]
description: Analyze nozzle condition without cleaning
gcode:
  {% set material = params.MATERIAL|default('PLA')|string %}
  
  { action_respond_info("=== NOZZLE ANALYSIS ===") }
  
  # Collect system data
  {% set total_hours = printer.print_stats.total_duration / 3600 %}
  {% set current_temp = printer.extruder.temperature %}
  
  # Simple health assessment
  {% set health_score = 1.0 %}
  {% if total_hours > 100 %}
    {% set health_score = health_score * 0.9 %}
  {% endif %}
  {% if total_hours > 500 %}
    {% set health_score = health_score * 0.8 %}
  {% endif %}
  
  { action_respond_info("Nozzle Health: " ~ "%.0f"|format(health_score * 100) ~ "%") }
  { action_respond_info("Operating Hours: " ~ "%.1f"|format(total_hours) ~ " | Temperature: " ~ "%.1f"|format(current_temp) ~ "C") }

[gcode_macro SMART_RESET]
description: Reset smart learning data
gcode:
  SET_GCODE_VARIABLE MACRO=CLEAN_NOZZLE_SMART VARIABLE=success_count VALUE=0
  SET_GCODE_VARIABLE MACRO=CLEAN_NOZZLE_SMART VARIABLE=failure_count VALUE=0
  SET_GCODE_VARIABLE MACRO=CLEAN_NOZZLE_SMART VARIABLE=efficiency_score VALUE=1.0
  { action_respond_info("Smart learning data has been reset") }

[gcode_macro SMART_STATS]
description: Show smart cleaning statistics
gcode:
  {% set success = printer["gcode_macro CLEAN_NOZZLE_SMART"].success_count %}
  {% set failure = printer["gcode_macro CLEAN_NOZZLE_SMART"].failure_count %}
  {% set efficiency = printer["gcode_macro CLEAN_NOZZLE_SMART"].efficiency_score %}
  {% set material = printer["gcode_macro CLEAN_NOZZLE_SMART"].last_material %}
  
  { action_respond_info("=== SMART CLEANING STATISTICS ===") }
  { action_respond_info("Successful cleanings: " ~ success) }
  { action_respond_info("Failed cleanings: " ~ failure) }
  { action_respond_info("Current efficiency: " ~ "%.0f"|format(efficiency * 100) ~ "%") }
  { action_respond_info("Last material: " ~ material) }

# ========================================================================
# VORON-OPTIMIZED CONVENIENCE MACROS
# ========================================================================

[gcode_macro CLEAN_PLA]
description: Optimized PLA cleaning for Voron
gcode:
  CLEAN_NOZZLE_SMART MATERIAL=PLA

[gcode_macro CLEAN_PETG]
description: Optimized PETG cleaning for Voron
gcode:
  CLEAN_NOZZLE_SMART MATERIAL=PETG

[gcode_macro CLEAN_ABS]
description: Optimized ABS cleaning for Voron
gcode:
  CLEAN_NOZZLE_SMART MATERIAL=ABS

[gcode_macro CLEAN_TPU]
description: Optimized TPU cleaning (gentle)
gcode:
  CLEAN_NOZZLE_SMART MATERIAL=TPU

[gcode_macro CLEAN_QUICK]
description: Quick cleaning for material changes
gcode:
  CLEAN_NOZZLE_SMART FORCE=quick

[gcode_macro CLEAN_DEEP]
description: Deep cleaning for clogs
gcode:
  CLEAN_NOZZLE_SMART FORCE=deep

[gcode_macro CLEAN_ECO]
description: Eco-friendly cleaning (less material)
gcode:
  CLEAN_NOZZLE_SMART ECO=true

[gcode_macro VORON_NOZZLE_CLEAN]
description: Voron-specific standard cleaning
gcode:
  CLEAN_NOZZLE_SMART MATERIAL=ABS